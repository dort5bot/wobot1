# main.py

ğŸŸ©
Webhook + KeepAlive (Ã¶nerilen)
Render dynoâ€™larÄ± 30 dk boÅŸta kalÄ±nca uyuyor â†’ sadece polling kullansan bot kapanÄ±r.
O yÃ¼zden:
Webhook ile Ã§alÄ±ÅŸtÄ±r (Telegram mesajlarÄ± doÄŸrudan Render URLâ€™ine gelir).
keep_alive() ile / veya /ping endpoint aÃ§ â†’ UptimeRobot vs. her 5 dakikada bir GET isteÄŸi atsÄ±n. BÃ¶ylece dyno uyanÄ±k kalÄ±r.
âœ… Avantaj:
Renderâ€™Ä±n doÄŸal ortamÄ±na uygun.
Ã‡ok daha stabil, pollingâ€™e gÃ¶re daha az hata.
Free Render iÃ§in Webhook + KeepAlive + UptimeRobot ping modelini Ã¶neririm.
WEBHOOK_URL = https://seninbot.onrender.com/<token> (Telegram iÃ§in)
KEEPALIVE_URL = https://seninbot.onrender.com/ (UptimeRobot GET iÃ§in

ğŸŸ¥



# Render / Heroku / Docker friendly Telegram bot orchestrator (PTB v20+)
# run_polling() ile async task olarak Ã§alÄ±ÅŸir
# - Async lifecycle: asyncio.run(async_main())
# - PTB Application properly initialized & started before polling
# - Workers (A & B) run in separate asyncio tasks and are cleanly cancelled on shutdown
# - Keep-alive web server (aiohttp) for platform health checks
# - Robust graceful shutdown on SIGINT/SIGTERM (and Windows fallback)
# - Improved logging + defensive error handling
#
# NasÄ±l Ã§alÄ±ÅŸÄ±r (Ã¶zeti):
# 1. Application oluÅŸturulur (ApplicationBuilder).
# 2. Handlers yÃ¼klenir (utils.handler_loader.load_handlers).
# 3. Workers baÅŸlatÄ±lÄ±r (jobs.worker_a.run_forever, jobs.worker_b.run_forever).
# 4. Web server (aiohttp) baÅŸlatÄ±lÄ±r.
# 5. PTB lifecycle: initialize() -> start() -> polling gÃ¶revini ayrÄ± Task olarak Ã§alÄ±ÅŸtÄ±r.
# 6. SIGINT/SIGTERM alÄ±nca: workers ve polling task gÃ¼venli ÅŸekilde iptal edilir, ardÄ±ndan app.stop/shutdown/cleanup Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.
#
# Notlar / Ã–nemli:
# * PTB v20+ ile "start" Ã§aÄŸrÄ±lmadan Ã¶nce initialize() Ã§aÄŸrÄ±lmazsa yukarÄ±daki RuntimeError alÄ±nÄ±r.
# * Polling uzun sÃ¼reli (blocking) coroutine olabilir; bu yÃ¼zden ayrÄ± task olarak Ã§alÄ±ÅŸtÄ±rÄ±yoruz.
# * `shutdown()` iÃ§inde loop.stop() Ã§aÄŸÄ±rmÄ±yoruz â€” asyncio.run flow'una bÄ±rakÄ±yoruz.
# * Worker'larÄ±n kendi iÃ§inde exception handle etmesi Ã¶nerilir; burada genel cancel & gather yapÄ±yoruz.
#
# GeliÅŸtirmek iÃ§in:
# - Yeni worker eklemek iÃ§in start_worker_coros listesine run_coroutine ekle.
# - metrics / prometheus endpoint ekle (web server'e).
# - health/readiness endpointleri geniÅŸlet.

